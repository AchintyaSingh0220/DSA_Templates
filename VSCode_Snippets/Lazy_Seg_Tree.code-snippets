{
	"Template for Range update and Range query Segtree (lazy propogation)": {
		"prefix": "Lazy_Seg_Tree",
		"body": [
		  "template <typename T> class SegTree",
		  "{",
		  "    public:",
		  "    vector<T> tree;",
		  "    vector<T> lazy;",
		  "    T merge(T &a, T &b)",
		  "    {",
		  "        return a + b;",
		  "    }",
		  "    void build(vector<T> &arr, long long &n)",
		  "    {",
		  "        while(__builtin_popcount(n) != 1) n++;",
		  "        tree.resize(2 * n);",
		  "        lazy.resize(2 * n);",
		  "        for(int i = 0; i<arr.size(); i++){",
		  "            tree[n + i] = arr[i];",
		  "        }",
		  "        for(int i = n-1; i>=1; i--){",
		  "            tree[i] = merge(tree[2 * i], tree[2 * i + 1]);",
		  "        }",
		  "    }",
		  "    void apl(int node, int tl, int tr, T val) {",
		  "        tree[node] += (tr - tl + 1) * val;",
		  "        lazy[node] += val;",
		  "    }",
		  "    void push(int node, int tl, int mid, int tr)",
		  "    {",
		  "        apl(2 * node, tl, mid, lazy[node]);",
		  "        apl(2 * node + 1, mid + 1, tr, lazy[node]);",
		  "",
		  "        lazy[node] = 0;",
		  "    }",
		  "    void update(int node, int tl, int tr, int l, int r, T v)",
		  "    {",
		  "        if(tr < l || r < tl) return;",
		  "        if(l <= tl && tr <= r) {",
		  "            apl(node, tl, tr, v);",
		  "            return;",
		  "        }",
		  "",
		  "        int mid = (tl + tr) / 2;",
		  "        push(node, tl, mid, tr);",
		  "        update(2 * node, tl, mid, l, r, v);",
		  "        update(2 * node + 1, mid + 1, tr, l, r, v);",
		  "        tree[node] = merge(tree[2*node], tree[2*node+1]);",
		  "    }",
		  "    T qry(int node, int tl, int tr, int l, int r)",
		  "    {",
		  "        if(tr < l || r < tl) return 0; //here 0 is identity element",
		  "        if(l <= tl && tr <= r) return tree[node];",
		  "",
		  "        int mid = (tl + tr) / 2;",
		  "        push(node, tl, mid, tr);",
		  "        T left = qry(2 * node, tl, mid, l, r);",
		  "        T right = qry(2 * node + 1, mid + 1, tr, l, r);",
		  "        return merge(left, right);",
		  "    }",
		  "};"
		],
		"description": "Template for Range update and Range query Segtree (lazy propogation)"
	}
}